# 손글씨 숫자 이미지 데이터셋 분류


C:\Users\lshun\deep-learning-from-scratch-master\ch03
python

import numpy as np
import pickle
import sys, os
sys.path.append(os.pardir)
from dataset.mnist import load_mnist
from PIL import Image

def get_data():
    (x_train, t_train), (x_test, t_test) = load_mnist(normalize = True, flatten = True, one_hot_label = False)
    return x_test, t_test
    
def init_network():
    with open("sample_weight.pkl", 'rb') as f:
        network = pickle.load(f)
    return network
    
def predict(network, x):
    W1, W2, W3 = network['W1'], network['W2'], network['W3']
    b1, b2, b3 = network['b1'], network['b2'], network['b3']
    a1 = np.dot(x, W1) + b1
    z1 = sigmoid(a1)
    a2 = np.dot(z1, W2) + b2
    z2 = sigmoid(a2)
    a3 = np.dot(z2, W3) + b3
    y = softmax(a3)
    return y
    
def sigmoid(a1):
    return 1 / 1 + (np.exp(-a1))
    
def sigmoid(a2):
    return 1 / 1 + (np.exp(-a2))
    
def softmax(a3):
    c = np.max(a3)
    exp_a3 = np.exp(a3 - c)
    sum_exp_a3 = np.sum(exp_a3)
    y = exp_a3 / sum_exp_a3
    return y
    
x, t = get_data()
network = init_network()

accuracy_cnt = 0
for i in range(len(x)):
    y = predict(network, x[i])
    p = np.argmax(y)
    if p == t[i]:
        accuracy_cnt += 1
    
print("Accuracy : " + str(float(accuracy_cnt) / len(x)))

## Accuracy : 0.1438

